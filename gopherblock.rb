require 'socket'

class File
  def self.binary?(name)    
    return false if !File.exist?(name)
    myStat = stat(name)
    return false unless myStat.file?
    open(name) { |file|
      blk = file.read(myStat.blksize)
      return false if blk.nil?
      return  blk.size == 0 ||
      blk.count("^ -~", "^\r\n") / blk.size > 0.3 ||
      blk.count("\x00") > 0
    }
  end
end

class Array
  def rest
    self[1..self.size-1] # I knew learning lisp would pay off one day!
  end
end

class GopherBlock
  def initialize(conf={})
    @port = conf[:port] || 70
    @dir = conf[:dir] || "."
    @host = conf[:host] || `hostname`.chomp
    @procs = {}    
    @client_addr=''
  end
  
  def mount_proc(name,&block)
    @procs[name]=block
  end

  def log(msg,*extra)
    #time = Time.now.strftime("%d%b%Y:%H:%M:%S -0600")
    #File.open(@logfile,"a").puts("#{@client_addr} - - [#{time}] \"#{msg}\" #{extra.join(' ')}")
  end
  
  def handle_request(url)
    param=""
    url = url[1..url.size-1] if url[0] == '/' && url[0,3]!='URL'
    if url.include?("\t") then
        url,param = url.split("\t")
    elsif url.include?("?") then 
        url,param = url.split("?")
    end

    path = @dir + "/" + ( url || "" )    
 
    if param=="$" then return %{+-1
+INFO: 1Main menu (non-gopher+)	/	#{@host}	#{@port}
+ADMIN:
 Admin: Server Administrator
 Server: 
+VIEWS:
 application/gopher+-menu: <512b>
+ABSTRACT:
 This is a Non-Gopher+ Server
}
end
 
    if url.length == 0 then
      procname="__ROOT__"
    else
      procname = url.split('/').first
    end

    return @procs[procname].call(url,url.split('/').rest,param) if !@procs[procname].nil?
    

    if url =~ /^URL\:/ then
       return weburl(url.sub('URL:',''))
    end

    notfound(url) if !File.exist?(path)
    
    result = case gettype(path)
             when "1" then readdir(url)
             else display(path,param)
             end
    result
  end
  
  def display(path,param='')
    if !File.exist?(path) then
	return notfound(path)
    end	
    if File.executable?(path) then
      log(path,'205')
      return %x{ #{path} #{param} }
          
    else
      log(path,"200")
      return File.open(path).read
    end
  end


  def weburl(url)
      %{
<!DOCTYPE html>
<html>
  <head>
  <meta http-equiv="refresh" content="2;url=#{url}">
  </head>
  <body>
  <p>
  you are following a link from gopher to a web site.  you will be
  automatically taken to the web site shortly.  if you do not get sent
  there, please click
  <a href="#{url}">here</a> to go to the web site.
    <br />
  Generated by GopherBlock</p>
  </body>
  </html>}


  end
  
  def readdir(path)
   
    log(path,"200")
    dir = "#{@dir}/#{path}".sub('//','/')
    lines=[]
    if File.exist?(dir+'/gophermap') then
      File.open(dir+'/gophermap').readlines.map { |line|
        line.chop!
        iteminfo = line.split(/\t/)
        if iteminfo.length < 2 then
          lines <<  "i#{line}\t\terror.host\t1"
        else
          #iteminfo[1] = "/#{path}/"+iteminfo[1] if iteminfo[1][0] != "/" || iteminfo[1] !~ /^URL/
          iteminfo[2] = @host if !iteminfo[2]
          iteminfo[3] = @port if !iteminfo[3]
          lines << iteminfo.join("\t")
        end
      }
    else
      lines = []
      Dir.entries(dir).each do |item|
     
        lines << "#{gettype((dir+'/'+item).sub('//','/'))}#{item}\t#{path}/#{item}\t#{@host}\t70" if !['.','..'].include?(item)
      end
      
    end
    lines.join("\r\n")
  end

  def notfound(url)
    log(url,'404')
    "3 '#{url}' doesn't exist!\terror.host1\yi This resource cannot be located.error.host1\n."
  end

  def gettype(file)
    #if anyone sees cameron, don't tell him I stole his code  
    File.directory?(file) ? "1" :
      file =~ /\.txt$/i ? "0" :
      file =~ /\.gif$/i ? "g" :
      file =~ /\.gz$/i ? "9" :
      file =~ /\.zip$/i ? "5" :
      file =~ /\.jpe?g$/i ? "I" :
      file =~ /\.png$/i ? "p" :
      file =~ /\.pdf$/i ? "d" :
      file =~ /\.css$/i ? "c" :
      file =~ /\.xml$/i ? "x" :
      file =~ /\.html?$/i ? "h" :
      file =~ /\.hqx$/i ? "4" :
      File.binary?(file) ? "9" :
      "0";
  end
  
  def start
    server = TCPServer.new(@port)
    while (session = server.accept)
      @client_addr = session.peeraddr.last
      session.puts handle_request(session.readline.chop)
      session.puts "\n."
      session.close
    end
  end
end

Server=GopherBlock.new( { :host => 'localhost' } )


def hole(name="__ROOT__",*args,&block)
  Server.mount_proc (name) do |url, args, params|
    @params = params
    block.call(*args)
  end
end

hole "test", [:foo, :bar] do |foo, bar|
  @params
end


Server.start
